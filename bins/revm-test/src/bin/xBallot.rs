use std::{io::Read, str::FromStr};

use alloy_sol_macro::sol;
use alloy_sol_types::{sol_data::Address, SolCall, SolInterface, SolType};
use revm::{
    db::{CacheDB, EmptyDB}, precompile::kzg_point_evaluation::as_bytes32, primitives::{
        address, keccak256, ruint::Uint, AccountInfo, Bytecode, Bytes, ChainAddress, ExecutionResult, OnChain, Output, TransactTo, B256, KECCAK_EMPTY, U256
    }, Database, Evm
};


sol! {
    // deloyed bytecode with param ["0x0000000000000000000000000000000000000000000000000000000000000123", "0x0000000000000000000000000000000000000000000000000000000000000456", "0x0000000000000000000000000000000000000000000000000000000000000789"]
    #[sol(bytecode="0x608060405234801561000f575f80fd5b506040516115bd3803806115bd83398181016040528101906100319190610304565b6100408161004660201b60201c565b50610378565b335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001805f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f01819055505f5b815181101561016c57600260405180604001604052808484815181106101145761011361034b565b5b602002602001015181526020015f815250908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f015560208201518160010155505080806001019150506100eb565b5050565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6101cb82610185565b810181811067ffffffffffffffff821117156101ea576101e9610195565b5b80604052505050565b5f6101fc610170565b905061020882826101c2565b919050565b5f67ffffffffffffffff82111561022757610226610195565b5b602082029050602081019050919050565b5f80fd5b5f819050919050565b61024e8161023c565b8114610258575f80fd5b50565b5f8151905061026981610245565b92915050565b5f61028161027c8461020d565b6101f3565b905080838252602082019050602084028301858111156102a4576102a3610238565b5b835b818110156102cd57806102b9888261025b565b8452602084019350506020810190506102a6565b5050509392505050565b5f82601f8301126102eb576102ea610181565b5b81516102fb84826020860161026f565b91505092915050565b5f6020828403121561031957610318610179565b5b5f82015167ffffffffffffffff8111156103365761033561017d565b5b610342848285016102d7565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b611238806103855f395ff3fe608060405234801561000f575f80fd5b5060043610610091575f3560e01c80635c19a95c116100645780635c19a95c1461011c578063609ff1bd146101385780639e7b8d6114610156578063a3ec138d14610172578063e2ba53f0146101a557610091565b80630121b93f14610095578063013cf08b146100b15780632e4176cf146100e25780633368e96814610100575b5f80fd5b6100af60048036038101906100aa9190610af1565b6101c3565b005b6100cb60048036038101906100c69190610af1565b6102fe565b6040516100d9929190610b43565b60405180910390f35b6100ea61032d565b6040516100f79190610ba9565b60405180910390f35b61011a60048036038101906101159190610d3c565b610350565b005b61013660048036038101906101319190610dad565b61047a565b005b6101406107ff565b60405161014d9190610dd8565b60405180910390f35b610170600480360381019061016b9190610dad565b61087a565b005b61018c60048036038101906101879190610dad565b610a25565b60405161019c9493929190610e0b565b60405180910390f35b6101ad610a7d565b6040516101ba9190610e4e565b60405180910390f35b5f60015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2090505f815f015403610248576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023f90610ec1565b60405180910390fd5b806001015f9054906101000a900460ff1615610299576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029090610f29565b60405180910390fd5b6001816001015f6101000a81548160ff021916908315150217905550818160020181905550805f0154600283815481106102d6576102d5610f47565b5b905f5260205f2090600202016001015f8282546102f39190610fa1565b925050819055505050565b6002818154811061030d575f80fd5b905f5260205f2090600202015f91509050805f0154908060010154905082565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001805f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f01819055505f5b8151811015610476576002604051806040016040528084848151811061041e5761041d610f47565b5b602002602001015181526020015f815250908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f015560208201518160010155505080806001019150506103f5565b5050565b5f60015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f209050806001015f9054906101000a900460ff161561050b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105029061101e565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610579576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057090611086565b60405180910390fd5b5b5f73ffffffffffffffffffffffffffffffffffffffff1660015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146106e35760015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d5906110ee565b60405180910390fd5b61057a565b6001816001015f6101000a81548160ff021916908315150217905550818160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f209050806001015f9054906101000a900460ff16156107dd57815f015460028260020154815481106107b4576107b3610f47565b5b905f5260205f2090600202016001015f8282546107d19190610fa1565b925050819055506107fa565b815f0154815f015f8282546107f29190610fa1565b925050819055505b505050565b5f805f90505f5b60028054905081101561087557816002828154811061082857610827610f47565b5b905f5260205f209060020201600101541115610868576002818154811061085257610851610f47565b5b905f5260205f2090600202016001015491508092505b8080600101915050610806565b505090565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610907576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fe9061117c565b60405180910390fd5b60015f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015f9054906101000a900460ff1615610994576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098b906111e4565b60405180910390fd5b5f60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f0154146109de575f80fd5b6001805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f018190555050565b6001602052805f5260405f205f91509050805f015490806001015f9054906101000a900460ff16908060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905084565b5f6002610a886107ff565b81548110610a9957610a98610f47565b5b905f5260205f2090600202015f0154905090565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b610ad081610abe565b8114610ada575f80fd5b50565b5f81359050610aeb81610ac7565b92915050565b5f60208284031215610b0657610b05610ab6565b5b5f610b1384828501610add565b91505092915050565b5f819050919050565b610b2e81610b1c565b82525050565b610b3d81610abe565b82525050565b5f604082019050610b565f830185610b25565b610b636020830184610b34565b9392505050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610b9382610b6a565b9050919050565b610ba381610b89565b82525050565b5f602082019050610bbc5f830184610b9a565b92915050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610c0c82610bc6565b810181811067ffffffffffffffff82111715610c2b57610c2a610bd6565b5b80604052505050565b5f610c3d610aad565b9050610c498282610c03565b919050565b5f67ffffffffffffffff821115610c6857610c67610bd6565b5b602082029050602081019050919050565b5f80fd5b610c8681610b1c565b8114610c90575f80fd5b50565b5f81359050610ca181610c7d565b92915050565b5f610cb9610cb484610c4e565b610c34565b90508083825260208201905060208402830185811115610cdc57610cdb610c79565b5b835b81811015610d055780610cf18882610c93565b845260208401935050602081019050610cde565b5050509392505050565b5f82601f830112610d2357610d22610bc2565b5b8135610d33848260208601610ca7565b91505092915050565b5f60208284031215610d5157610d50610ab6565b5b5f82013567ffffffffffffffff811115610d6e57610d6d610aba565b5b610d7a84828501610d0f565b91505092915050565b610d8c81610b89565b8114610d96575f80fd5b50565b5f81359050610da781610d83565b92915050565b5f60208284031215610dc257610dc1610ab6565b5b5f610dcf84828501610d99565b91505092915050565b5f602082019050610deb5f830184610b34565b92915050565b5f8115159050919050565b610e0581610df1565b82525050565b5f608082019050610e1e5f830187610b34565b610e2b6020830186610dfc565b610e386040830185610b9a565b610e456060830184610b34565b95945050505050565b5f602082019050610e615f830184610b25565b92915050565b5f82825260208201905092915050565b7f486173206e6f20726967687420746f20766f74650000000000000000000000005f82015250565b5f610eab601483610e67565b9150610eb682610e77565b602082019050919050565b5f6020820190508181035f830152610ed881610e9f565b9050919050565b7f416c726561647920766f7465642e0000000000000000000000000000000000005f82015250565b5f610f13600e83610e67565b9150610f1e82610edf565b602082019050919050565b5f6020820190508181035f830152610f4081610f07565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610fab82610abe565b9150610fb683610abe565b9250828201905080821115610fce57610fcd610f74565b5b92915050565b7f596f7520616c726561647920766f7465642e00000000000000000000000000005f82015250565b5f611008601283610e67565b915061101382610fd4565b602082019050919050565b5f6020820190508181035f83015261103581610ffc565b9050919050565b7f53656c662d64656c65676174696f6e20697320646973616c6c6f7765642e00005f82015250565b5f611070601e83610e67565b915061107b8261103c565b602082019050919050565b5f6020820190508181035f83015261109d81611064565b9050919050565b7f466f756e64206c6f6f7020696e2064656c65676174696f6e2e000000000000005f82015250565b5f6110d8601983610e67565b91506110e3826110a4565b602082019050919050565b5f6020820190508181035f830152611105816110cc565b9050919050565b7f4f6e6c79206368616972706572736f6e2063616e2067697665207269676874205f8201527f746f20766f74652e000000000000000000000000000000000000000000000000602082015250565b5f611166602883610e67565b91506111718261110c565b604082019050919050565b5f6020820190508181035f8301526111938161115a565b9050919050565b7f54686520766f74657220616c726561647920766f7465642e00000000000000005f82015250565b5f6111ce601883610e67565b91506111d98261119a565b602082019050919050565b5f6020820190508181035f8301526111fb816111c2565b905091905056fea2646970667358221220d270b5394d63d1df50687ca5d29422215b50eed8b371ab3ab4382ccdce21e08064736f6c634300081a003300000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000012300000000000000000000000000000000000000000000000000000000000004560000000000000000000000000000000000000000000000000000000000000789")]
    contract Ballot {

        struct Voter {
            uint weight; // weight is accumulated by delegation
            bool voted;  // if true, that person already voted
            address delegate; // person delegated to
            uint vote;   // index of the voted proposal
        }

        struct Proposal {
            // If you can limit the length to a certain number of bytes,
            // always use one of bytes1 to bytes32 because they are much cheaper
            bytes32 name;   // short name (up to 32 bytes)
            uint voteCount; // number of accumulated votes
        }

        address public chairperson;

        mapping(address => Voter) public voters;

        Proposal[] public proposals;

        /**
         * @dev Create a new ballot to choose one of 'proposalNames'.
         * @param proposalNames names of proposals
         */
        constructor(bytes32[] memory proposalNames) {
            init(proposalNames);
        }

        function init(bytes32[] memory proposalNames) public {
            chairperson = msg.sender;
            voters[chairperson].weight = 1;

            for (uint i = 0; i < proposalNames.length; i++) {
                // 'Proposal({...})' creates a temporary
                // Proposal object and 'proposals.push(...)'
                // appends it to the end of 'proposals'.
                proposals.push(Proposal({
                    name: proposalNames[i],
                    voteCount: 0
                }));
            }
        }

        /**
         * @dev Give 'voter' the right to vote on this ballot. May only be called by 'chairperson'.
         * @param voter address of voter
         */
        function giveRightToVote(address voter) public {
            require(
                msg.sender == chairperson,
                "Only chairperson can give right to vote."
            );
            require(
                !voters[voter].voted,
                "The voter already voted."
            );
            require(voters[voter].weight == 0);
            voters[voter].weight = 1;
        }

        /**
         * @dev Delegate your vote to the voter 'to'.
         * @param to address to which vote is delegated
         */
        function delegate(address to) public {
            Voter storage sender = voters[msg.sender];
            require(!sender.voted, "You already voted.");
            require(to != msg.sender, "Self-delegation is disallowed.");

            while (voters[to].delegate != address(0)) {
                to = voters[to].delegate;

                // We found a loop in the delegation, not allowed.
                require(to != msg.sender, "Found loop in delegation.");
            }
            sender.voted = true;
            sender.delegate = to;
            Voter storage delegate_ = voters[to];
            if (delegate_.voted) {
                // If the delegate already voted,
                // directly add to the number of votes
                proposals[delegate_.vote].voteCount += sender.weight;
            } else {
                // If the delegate did not vote yet,
                // add to her weight.
                delegate_.weight += sender.weight;
            }
        }

        /**
         * @dev Give your vote (including votes delegated to you) to proposal 'proposals[proposal].name'.
         * @param proposal index of proposal in the proposals array
         */
        function vote(uint256 proposal) public {
            Voter storage sender = voters[msg.sender];
            require(sender.weight != 0, "Has no right to vote");
            require(!sender.voted, "Already voted.");
            sender.voted = true;
            sender.vote = proposal;

            // If 'proposal' is out of the range of the array,
            // this will throw automatically and revert all
            // changes.
            proposals[proposal].voteCount += sender.weight;
        }

        /**
         * @dev Computes the winning proposal taking all previous votes into account.
         * @return winningProposal_ index of winning proposal in the proposals array
         */
        function winningProposal() public view returns (uint winningProposal_)
        {
            uint winningVoteCount = 0;
            for (uint p = 0; p < proposals.length; p++) {
                if (proposals[p].voteCount > winningVoteCount) {
                    winningVoteCount = proposals[p].voteCount;
                    winningProposal_ = p;
                }
            }
        }

        /**
         * @dev Calls winningProposal() function to get the index of the winner contained in the proposals array and then
         * @return winnerName_ the name of the winner
         */
        function winnerName() public view returns (bytes32 winnerName_)
        {
            winnerName_ = proposals[winningProposal()].name;
        }
    }

    #[sol(bytecode="0x608060405234801561000f575f80fd5b5060405161142938038061142983398181016040528101906100319190610410565b610041600161017c60201b60201c565b5f3073ffffffffffffffffffffffffffffffffffffffff168260405160240161006a919061050e565b6040516020818303038152906040527f3368e968000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516100f49190610580565b5f60405180830381855af49150503d805f811461012c576040519150601f19603f3d011682016040523d82523d5f602084013e610131565b606091505b5050905080610175576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016c906105f0565b60405180910390fd5b50506107f7565b61018d60018261019060201b60201c565b50565b6101a2828232306101a660201b60201c565b5050565b6101ca848484845f801b60405180602001604052805f8152506101d060201b60201c565b50505050565b5f60018787878787876040516020016101ef979695949392919061077b565b60405160208183030381529060405290505f6104d273ffffffffffffffffffffffffffffffffffffffff16826040516102289190610580565b5f60405180830381855afa9150503d805f8114610260576040519150601f19603f3d011682016040523d82523d5f602084013e610265565b606091505b5050905080610272575f80fd5b5050505050505050565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6102d782610291565b810181811067ffffffffffffffff821117156102f6576102f56102a1565b5b80604052505050565b5f61030861027c565b905061031482826102ce565b919050565b5f67ffffffffffffffff821115610333576103326102a1565b5b602082029050602081019050919050565b5f80fd5b5f819050919050565b61035a81610348565b8114610364575f80fd5b50565b5f8151905061037581610351565b92915050565b5f61038d61038884610319565b6102ff565b905080838252602082019050602084028301858111156103b0576103af610344565b5b835b818110156103d957806103c58882610367565b8452602084019350506020810190506103b2565b5050509392505050565b5f82601f8301126103f7576103f661028d565b5b815161040784826020860161037b565b91505092915050565b5f6020828403121561042557610424610285565b5b5f82015167ffffffffffffffff81111561044257610441610289565b5b61044e848285016103e3565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61048981610348565b82525050565b5f61049a8383610480565b60208301905092915050565b5f602082019050919050565b5f6104bc82610457565b6104c68185610461565b93506104d183610471565b805f5b838110156105015781516104e8888261048f565b97506104f3836104a6565b9250506001810190506104d4565b5085935050505092915050565b5f6020820190508181035f83015261052681846104b2565b905092915050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f61055a8261052e565b6105648185610538565b9350610574818560208601610542565b80840191505092915050565b5f61058b8284610550565b915081905092915050565b5f82825260208201905092915050565b7f496e69742064656c65676174652063616c6c206661696c6564000000000000005f82015250565b5f6105da601983610596565b91506105e5826105a6565b602082019050919050565b5f6020820190508181035f830152610607816105ce565b9050919050565b5f61ffff82169050919050565b5f8160f01b9050919050565b5f6106318261061b565b9050919050565b6106496106448261060e565b610627565b82525050565b5f67ffffffffffffffff82169050919050565b5f8160c01b9050919050565b5f61067882610662565b9050919050565b61069061068b8261064f565b61066e565b82525050565b5f8115159050919050565b5f8160f81b9050919050565b5f6106b7826106a1565b9050919050565b5f6106c8826106ad565b9050919050565b6106e06106db82610696565b6106be565b82525050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61070f826106e6565b9050919050565b5f8160601b9050919050565b5f61072c82610716565b9050919050565b5f61073d82610722565b9050919050565b61075561075082610705565b610733565b82525050565b5f819050919050565b61077561077082610348565b61075b565b82525050565b5f610786828a610638565b600282019150610796828961067f565b6008820191506107a682886106cf565b6001820191506107b68287610744565b6014820191506107c68286610744565b6014820191506107d68285610764565b6020820191506107e68284610550565b915081905098975050505050505050565b610c25806108045f395ff3fe608060405234801561000f575f80fd5b5060043610610060575f3560e01c80630121b93f14610064578063013cf08b146100805780632e4176cf146100b15780635c19a95c146100cf5780639e7b8d61146100eb578063a3ec138d14610107575b5f80fd5b61007e600480360381019061007991906106cf565b61013a565b005b61009a600480360381019061009591906106cf565b61027c565b6040516100a8929190610721565b60405180910390f35b6100b96102ab565b6040516100c69190610787565b60405180910390f35b6100e960048036038101906100e491906107ca565b6102ce565b005b610105600480360381019061010091906107ca565b610410565b005b610121600480360381019061011c91906107ca565b610552565b604051610131949392919061080f565b60405180910390f35b61014460016105aa565b5f3073ffffffffffffffffffffffffffffffffffffffff168260405160240161016d9190610852565b6040516020818303038152906040527f0121b93f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516101f791906108bd565b5f60405180830381855af49150503d805f811461022f576040519150601f19603f3d011682016040523d82523d5f602084013e610234565b606091505b5050905080610278576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026f9061092d565b60405180910390fd5b5050565b6002818154811061028b575f80fd5b905f5260205f2090600202015f91509050805f0154908060010154905082565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6102d860016105aa565b5f3073ffffffffffffffffffffffffffffffffffffffff16826040516024016103019190610787565b6040516020818303038152906040527f5c19a95c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161038b91906108bd565b5f60405180830381855af49150503d805f81146103c3576040519150601f19603f3d011682016040523d82523d5f602084013e6103c8565b606091505b505090508061040c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040390610995565b60405180910390fd5b5050565b61041a60016105aa565b5f3073ffffffffffffffffffffffffffffffffffffffff16826040516024016104439190610787565b6040516020818303038152906040527f9e7b8d61000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516104cd91906108bd565b5f60405180830381855af49150503d805f8114610505576040519150601f19603f3d011682016040523d82523d5f602084013e61050a565b606091505b505090508061054e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054590610a23565b60405180910390fd5b5050565b6001602052805f5260405f205f91509050805f015490806001015f9054906101000a900460ff16908060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905084565b6105b56001826105b8565b50565b6105c4828232306105c8565b5050565b6105e6848484845f801b60405180602001604052805f8152506105ec565b50505050565b5f600187878787878760405160200161060b9796959493929190610b73565b60405160208183030381529060405290505f6104d273ffffffffffffffffffffffffffffffffffffffff168260405161064491906108bd565b5f60405180830381855afa9150503d805f811461067c576040519150601f19603f3d011682016040523d82523d5f602084013e610681565b606091505b505090508061068e575f80fd5b5050505050505050565b5f80fd5b5f819050919050565b6106ae8161069c565b81146106b8575f80fd5b50565b5f813590506106c9816106a5565b92915050565b5f602082840312156106e4576106e3610698565b5b5f6106f1848285016106bb565b91505092915050565b5f819050919050565b61070c816106fa565b82525050565b61071b8161069c565b82525050565b5f6040820190506107345f830185610703565b6107416020830184610712565b9392505050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61077182610748565b9050919050565b61078181610767565b82525050565b5f60208201905061079a5f830184610778565b92915050565b6107a981610767565b81146107b3575f80fd5b50565b5f813590506107c4816107a0565b92915050565b5f602082840312156107df576107de610698565b5b5f6107ec848285016107b6565b91505092915050565b5f8115159050919050565b610809816107f5565b82525050565b5f6080820190506108225f830187610712565b61082f6020830186610800565b61083c6040830185610778565b6108496060830184610712565b95945050505050565b5f6020820190506108655f830184610712565b92915050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f6108978261086b565b6108a18185610875565b93506108b181856020860161087f565b80840191505092915050565b5f6108c8828461088d565b915081905092915050565b5f82825260208201905092915050565b7f566f74652064656c65676174652063616c6c206661696c6564000000000000005f82015250565b5f6109176019836108d3565b9150610922826108e3565b602082019050919050565b5f6020820190508181035f8301526109448161090b565b9050919050565b7f44656c65676174652064656c65676174652063616c6c206661696c65640000005f82015250565b5f61097f601d836108d3565b915061098a8261094b565b602082019050919050565b5f6020820190508181035f8301526109ac81610973565b9050919050565b7f476976655269676874546f566f74652064656c65676174652063616c6c2066615f8201527f696c656400000000000000000000000000000000000000000000000000000000602082015250565b5f610a0d6024836108d3565b9150610a18826109b3565b604082019050919050565b5f6020820190508181035f830152610a3a81610a01565b9050919050565b5f61ffff82169050919050565b5f8160f01b9050919050565b5f610a6482610a4e565b9050919050565b610a7c610a7782610a41565b610a5a565b82525050565b5f67ffffffffffffffff82169050919050565b5f8160c01b9050919050565b5f610aab82610a95565b9050919050565b610ac3610abe82610a82565b610aa1565b82525050565b5f8160f81b9050919050565b5f610adf82610ac9565b9050919050565b5f610af082610ad5565b9050919050565b610b08610b03826107f5565b610ae6565b82525050565b5f8160601b9050919050565b5f610b2482610b0e565b9050919050565b5f610b3582610b1a565b9050919050565b610b4d610b4882610767565b610b2b565b82525050565b5f819050919050565b610b6d610b68826106fa565b610b53565b82525050565b5f610b7e828a610a6b565b600282019150610b8e8289610ab2565b600882019150610b9e8288610af7565b600182019150610bae8287610b3c565b601482019150610bbe8286610b3c565b601482019150610bce8285610b5c565b602082019150610bde828461088d565b91508190509897505050505050505056fea26469706673582212206d05b1ca1d8ea518096ea4cda5e875bf2bfa8099b6a355ecf18a315a1e827d5964736f6c634300081a003300000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000012300000000000000000000000000000000000000000000000000000000000004560000000000000000000000000000000000000000000000000000000000000789")]
    contract BallotState {

        struct Voter {
            uint weight; // weight is accumulated by delegation
            bool voted;  // if true, that person already voted
            address delegate; // person delegated to
            uint vote;   // index of the voted proposal
        }

        struct Proposal {
            // If you can limit the length to a certain number of bytes,
            // always use one of bytes1 to bytes32 because they are much cheaper
            bytes32 name;   // short name (up to 32 bytes)
            uint voteCount; // number of accumulated votes
        }

        address public chairperson;

        mapping(address => Voter) public voters;

        Proposal[] public proposals;

        constructor(bytes32[] memory proposalNames) {
            EVM.xCallOnL1(true);
            (bool success, ) = address(this).delegatecall(abi.encodeWithSignature("init(bytes32[])", proposalNames));
            require(success, "Init delegate call failed");
        }

        function giveRightToVote(address voter) public {
            EVM.xCallOnL1(true);
            (bool success, ) = address(this).delegatecall(abi.encodeWithSignature("giveRightToVote(address)", voter));
            require(success, "GiveRightToVote delegate call failed");
        }

        function delegate(address to) public {
            EVM.xCallOnL1(true);
            (bool success, ) = address(this).delegatecall(abi.encodeWithSignature("delegate(address)", to));
            require(success, "Delegate delegate call failed");
        }

        function vote(uint256 proposal) public {
            EVM.xCallOnL1(true);
            (bool success, ) = address(this).delegatecall(abi.encodeWithSignature("vote(uint256)", proposal));
            require(success, "Vote delegate call failed");
        }
    }
}


const A: u64 = 1;
const B: u64 = 160010;

/// This examples uses code on A to modify state on B
/// The chairperson gives Alice right to vote.
/// Alice delegate the right to Bob.
/// Bob votes for proposal 0.
fn main() {
    let alice = address!("2222000000000000000000000000000000000000");
    let bob = address!("3333000000000000000000000000000000000000");
    let chainperson = address!("4444000000000000000000000000000000000000");

    let deployment = address!("37ab31eed8a6ae736a28d1371d41ff9dc2c21d37");

    let mut db = CacheDB::new(EmptyDB::default());
    db.insert_account_info(
        alice.on_chain(B),
        AccountInfo::new(U256::MAX, 0, KECCAK_EMPTY, Bytecode::default()),
    );
    db.insert_account_info(
        bob.on_chain(A),
        AccountInfo::new(U256::MAX, 0, KECCAK_EMPTY, Bytecode::default()),
    );
    deploy_contract(
        &mut db,
        chainperson.on_chain(A),
        deployment.on_chain(A),
        Ballot::BYTECODE.clone(),
    );
    deploy_contract(
        &mut db,
        chainperson.on_chain(B),
        deployment.on_chain(B),
        BallotState::BYTECODE.clone(),
    );

    let mut do_transact = |addr: ChainAddress, op: Vec<u8>| -> ExecutionResult {
        println!("\n\n");
        let mut evm = Evm::builder()
            .modify_cfg_env(|c| {
                c.xchain = true;
            })
            .modify_tx_env(|tx| {
                tx.caller = addr;
                tx.transact_to = TransactTo::Call(ChainAddress(addr.0, deployment));
                tx.data = op.clone().into();
            })
            .with_db(&mut db)
            .build();
        let res = evm.transact().unwrap().result;
        evm.transact_commit().unwrap();
        drop(evm);
        println!("{:?}\n~~~~~~~~~\n", res);
        res
    };

    let results = vec![
        // Chairperson gives Alice right to vote
        do_transact(
            chainperson.on_chain(B),
            BallotState::giveRightToVoteCall {
                voter: alice,
            }
            .abi_encode(),
        ),
        // Alice delegates the right to Bob
        do_transact(
            alice.on_chain(B),
            BallotState::delegateCall {
                to: bob,
            }
            .abi_encode(),
        ),
        // Bob votes for proposal 0
        do_transact(
            bob.on_chain(B),
            BallotState::voteCall { proposal: Uint::from(0) }.abi_encode(),
        ),
    ];

    for res in results {
        assert!(res.is_success());
    }

    println!("Success");
}

fn deploy_contract(
    cache_db: &mut CacheDB<EmptyDB>,
    deployer: ChainAddress,
    addr: ChainAddress,
    code: Bytes,
) {
    let mut evm = Evm::builder()
        .modify_cfg_env(|c| {
            c.xchain = true;
        })
        .modify_tx_env(|tx| {
            tx.caller = deployer;
            tx.transact_to = TransactTo::Create;
            tx.data = code;
        })
        .with_db(cache_db)
        .build();
    assert!(evm.transact().unwrap().result.is_success());
    evm.transact_commit().unwrap();
    drop(evm);
}
